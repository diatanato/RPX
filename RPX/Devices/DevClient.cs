/*
===========================================================================

  Copyright (c) 2016 diatanato

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see http://www.gnu.org/licenses/

  This file is part of RPX source code.

===========================================================================
*/

using System;

using Hmg.Comm;

namespace RPX.Devices
{
    using Interfaces;

    /************************************************************************
    *                                                                       *
    *                                                                       *
    *                                                                       *
    ************************************************************************/

    public class DevClient : IDevice
    {
        public event EventHandler Connected;
        public event EventHandler Disconnected;
        public event EventHandler<String> ErrorReported;
        public event EventHandler<ProcedureInMessage> ReceivedMessage;

        public void Connect()
        {
            Connected?.Invoke(this, EventArgs.Empty);
        }

        public void Disconnect()
        {
            Disconnected?.Invoke(this, EventArgs.Empty);
        }

        public void SendMessage(ProcedureOutMessage message)
        {
            Console.WriteLine($"OUT: {message.ID}");
            
            switch (message.ID)
            {
                case CommMsgID.ReqIdentity:
                {
                    ReceivedMessage?.Invoke(this, new ProcedureInMessage(CommMsgID.RxIdentity, new byte[]
                    {
                        0x00, 0x5E, 0x06, 0x00
                    }));
                }
                break;
                case CommMsgID.ReqConfig:
                {
                    ReceivedMessage?.Invoke(this, new ProcedureInMessage(CommMsgID.RxConfig, new byte[]
                    {
                        0x01, 0x20, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00
                    }));
                }
                break;
                case CommMsgID.ReqGlobalParams:
                {
                    ReceivedMessage?.Invoke(this, new ProcedureInMessage(CommMsgID.RxGlobalParams, new byte[]
                    {
                        0x00, 0x09, 0x30, 0x00, 0x00, 0x10, 0x30, 0x09, 0x00, 0x32, 0x30, 0x13, 0x00, 0x0C, 0x30, 0x0A, 0x00, 0x01, 0x30, 0x0C, 0x00, 0x05, 0x30, 0x49, 0x00, 0x00, 0x30, 0x52, 0x00, 0x00, 0x30, 0x5F, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00
                    }));
                }
                break;
                case CommMsgID.ReqBankPresetNames:
                {
                    ReceivedMessage?.Invoke(this, new ProcedureInMessage(CommMsgID.RxBankPresetNames, new byte[]
                    {
                        0x01, 0x64, 0x4D, 0x2D, 0x52, 0x69, 0x64, 0x65, 0x20, 0x20, 0x20, 0x20, 0x00, 0x43, 0x4F, 0x4F, 0x4C, 0x20, 0x43, 0x48, 0x4F, 0x20, 0x20, 0x00, 0x53, 0x4F, 0x4C, 0x4F, 0x2D, 0x32, 0x20, 0x20, 0x20, 0x20, 0x00, 0x42, 0x4F, 0x4F, 0x47, 0x20, 0x4D, 0x41, 0x4E, 0x20, 0x20, 0x00, 0x47, 0x52, 0x45, 0x41, 0x53, 0x4F, 0x4C, 0x4F, 0x20, 0x20, 0x00, 0x50, 0x4C, 0x45, 0x58, 0x49, 0x44, 0x52, 0x56, 0x20, 0x20, 0x00, 0x53, 0x55, 0x50, 0x52, 0x43, 0x4C, 0x59, 0x44, 0x20, 0x20, 0x00, 0x56, 0x4F, 0x58, 0x44, 0x45, 0x4C, 0x41, 0x59, 0x20, 0x20, 0x00, 0x57, 0x48, 0x41, 0x4D, 0x4D, 0x59, 0x20, 0x20, 0x20, 0x20, 0x00, 0x41, 0x43, 0x4F, 0x55, 0x53, 0x54, 0x49, 0x43, 0x00, 0x4D, 0x2D, 0x52, 0x69, 0x64, 0x65, 0x20, 0x20, 0x20, 0x20, 0x00, 0x4F, 0x56, 0x52, 0x44, 0x52, 0x56, 0x46, 0x58, 0x20, 0x20, 0x00, 0x44, 0x4C, 0x59, 0x52, 0x56, 0x42, 0x46, 0x58, 0x20, 0x20, 0x00, 0x53, 0x50, 0x52, 0x49, 0x4E, 0x47, 0x46, 0x58, 0x20, 0x20, 0x00, 0x50, 0x48, 0x53, 0x44, 0x4C, 0x59, 0x46, 0x58, 0x20, 0x20, 0x00, 0x57, 0x41, 0x48, 0x20, 0x20, 0x20, 0x46, 0x58, 0x20, 0x20, 0x00, 0x57, 0x48, 0x41, 0x4D, 0x4D, 0x59, 0x46, 0x58, 0x20, 0x20, 0x00, 0x44, 0x52, 0x54, 0x46, 0x4C, 0x47, 0x46, 0x58, 0x20, 0x20, 0x00, 0x54, 0x41, 0x50, 0x44, 0x4C, 0x59, 0x46, 0x58, 0x20, 0x20, 0x00, 0x45, 0x51, 0x42, 0x53, 0x54, 0x20, 0x46, 0x58, 0x20, 0x20, 0x00, 0x42, 0x49, 0x47, 0x4E, 0x20, 0x42, 0x41, 0x44, 0x20, 0x20, 0x00, 0x4D, 0x54, 0x4C, 0x20, 0x48, 0x45, 0x41, 0x44, 0x20, 0x20, 0x00, 0x4D, 0x45, 0x54, 0x41, 0x4C, 0x43, 0x4C, 0x4E, 0x20, 0x20, 0x00, 0x4D, 0x4F, 0x53, 0x48, 0x4D, 0x45, 0x4C, 0x4F, 0x20, 0x20, 0x00, 0x4C, 0x20, 0x4F, 0x20, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x53, 0x4F, 0x4C, 0x4F, 0x44, 0x55, 0x44, 0x45, 0x20, 0x20, 0x00, 0x42, 0x4C, 0x41, 0x43, 0x4B, 0x4C, 0x42, 0x4C, 0x20, 0x20, 0x00, 0x41, 0x4E, 0x47, 0x4C, 0x44, 0x45, 0x54, 0x48, 0x20, 0x20, 0x00, 0x49, 0x4E, 0x32, 0x44, 0x56, 0x4F, 0x49, 0x44, 0x20, 0x20, 0x00, 0x4B, 0x49, 0x4C, 0x4C, 0x45, 0x52, 0x20, 0x20, 0x20, 0x20, 0x00, 0x42, 0x41, 0x43, 0x4B, 0x57, 0x52, 0x44, 0x53, 0x20, 0x20, 0x00, 0x50, 0x55, 0x4E, 0x4B, 0x49, 0x53, 0x48, 0x20, 0x20, 0x20, 0x00, 0x46, 0x55, 0x4E, 0x4B, 0x59, 0x43, 0x4C, 0x4E, 0x20, 0x20, 0x00, 0x52, 0x55, 0x4D, 0x42, 0x4C, 0x45, 0x20, 0x20, 0x20, 0x20, 0x00, 0x48, 0x41, 0x5A, 0x59, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x57, 0x41, 0x48, 0x53, 0x20, 0x55, 0x50, 0x20, 0x20, 0x20, 0x00, 0x46, 0x41, 0x5A, 0x45, 0x44, 0x4F, 0x55, 0x54, 0x20, 0x20, 0x00, 0x45, 0x43, 0x48, 0x4F, 0x48, 0x45, 0x41, 0x44, 0x20, 0x20, 0x00, 0x46, 0x55, 0x5A, 0x5A, 0x4B, 0x49, 0x4E, 0x47, 0x20, 0x20, 0x00, 0x4A, 0x55, 0x4D, 0x50, 0x20, 0x50, 0x4E, 0x4C, 0x20, 0x20, 0x00, 0x42, 0x4C, 0x55, 0x45, 0x53, 0x44, 0x4C, 0x59, 0x20, 0x20, 0x00, 0x53, 0x54, 0x45, 0x56, 0x59, 0x52, 0x41, 0x59, 0x20, 0x20, 0x00, 0x42, 0x4C, 0x55, 0x45, 0x53, 0x44, 0x52, 0x56, 0x20, 0x20, 0x00, 0x42, 0x49, 0x47, 0x4E, 0x20, 0x42, 0x4C, 0x55, 0x20, 0x20, 0x00, 0x53, 0x4C, 0x49, 0x44, 0x45, 0x52, 0x20, 0x20, 0x20, 0x20, 0x00, 0x48, 0x41, 0x49, 0x52, 0x20, 0x44, 0x41, 0x59, 0x20, 0x20, 0x00, 0x42, 0x41, 0x4C, 0x4C, 0x41, 0x44, 0x20, 0x20, 0x20, 0x20, 0x00, 0x52, 0x4F, 0x43, 0x4B, 0x53, 0x54, 0x41, 0x4B, 0x20, 0x20, 0x00, 0x42, 0x49, 0x47, 0x20, 0x53, 0x54, 0x52, 0x4D, 0x20, 0x20, 0x00, 0x47, 0x52, 0x45, 0x41, 0x53, 0x4F, 0x4C, 0x4F, 0x20, 0x20, 0x00, 0x48, 0x4F, 0x54, 0x52, 0x4F, 0x44, 0x20, 0x20, 0x20, 0x20, 0x00, 0x43, 0x4F, 0x4F, 0x4C, 0x20, 0x43, 0x4C, 0x4E, 0x20, 0x20, 0x00, 0x48, 0x4F, 0x54, 0x52, 0x59, 0x54, 0x48, 0x4D, 0x20, 0x20, 0x00, 0x55, 0x4E, 0x44, 0x4F, 0x4E, 0x45, 0x20, 0x20, 0x20, 0x20, 0x00, 0x42, 0x49, 0x47, 0x20, 0x52, 0x4F, 0x4F, 0x4D, 0x20, 0x20, 0x00, 0x52, 0x45, 0x43, 0x54, 0x46, 0x49, 0x45, 0x44, 0x20, 0x20, 0x00, 0x53, 0x54, 0x52, 0x4E, 0x47, 0x57, 0x41, 0x59, 0x20, 0x20, 0x00, 0x54, 0x57, 0x41, 0x4E, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x48, 0x45, 0x41, 0x56, 0x59, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x52, 0x4F, 0x43, 0x4B, 0x4C, 0x45, 0x41, 0x44, 0x20, 0x20, 0x00, 0x52, 0x48, 0x41, 0x50, 0x53, 0x4F, 0x44, 0x59, 0x20, 0x20, 0x00, 0x47, 0x49, 0x4C, 0x4D, 0x4F, 0x55, 0x52, 0x20, 0x20, 0x20, 0x00, 0x48, 0x45, 0x4E, 0x44, 0x52, 0x49, 0x58, 0x20, 0x20, 0x20, 0x00, 0x53, 0x41, 0x54, 0x43, 0x48, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x44, 0x43, 0x2F, 0x41, 0x43, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x53, 0x41, 0x4E, 0x44, 0x20, 0x4D, 0x41, 0x4E, 0x20, 0x20, 0x00, 0x57, 0x4F, 0x4D, 0x41, 0x4E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x53, 0x54, 0x52, 0x41, 0x59, 0x4B, 0x41, 0x54, 0x20, 0x20, 0x00, 0x50, 0x52, 0x49, 0x44, 0x45, 0x44, 0x4C, 0x59, 0x20, 0x20, 0x00, 0x43, 0x4C, 0x49, 0x46, 0x4E, 0x4F, 0x54, 0x5A, 0x20, 0x20, 0x00, 0x44, 0x52, 0x49, 0x56, 0x49, 0x4E, 0x20, 0x20, 0x20, 0x20, 0x00, 0x43, 0x48, 0x4B, 0x4E, 0x20, 0x50, 0x4B, 0x4E, 0x20, 0x20, 0x00, 0x43, 0x52, 0x55, 0x4E, 0x43, 0x48, 0x59, 0x20, 0x20, 0x20, 0x00, 0x53, 0x50, 0x41, 0x4E, 0x4B, 0x49, 0x4E, 0x20, 0x20, 0x20, 0x00, 0x43, 0x4F, 0x57, 0x42, 0x4F, 0x59, 0x20, 0x20, 0x20, 0x20, 0x00, 0x43, 0x49, 0x54, 0x52, 0x55, 0x53, 0x20, 0x20, 0x20, 0x20, 0x00, 0x4C, 0x45, 0x47, 0x41, 0x43, 0x59, 0x20, 0x20, 0x20, 0x20, 0x00, 0x42, 0x41, 0x53, 0x53, 0x20, 0x4D, 0x41, 0x4E, 0x20, 0x20, 0x00, 0x42, 0x52, 0x49, 0x54, 0x20, 0x34, 0x35, 0x20, 0x20, 0x20, 0x00, 0x54, 0x57, 0x49, 0x4E, 0x20, 0x52, 0x56, 0x42, 0x20, 0x20, 0x00, 0x53, 0x4D, 0x4F, 0x4F, 0x54, 0x48, 0x59, 0x20, 0x20, 0x20, 0x00, 0x4D, 0x52, 0x20, 0x43, 0x4C, 0x45, 0x41, 0x4E, 0x20, 0x20, 0x00, 0x53, 0x57, 0x45, 0x4C, 0x4C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x4F, 0x43, 0x54, 0x41, 0x56, 0x45, 0x44, 0x20, 0x20, 0x20, 0x00, 0x35, 0x54, 0x48, 0x53, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x41, 0x52, 0x43, 0x48, 0x54, 0x4F, 0x50, 0x20, 0x20, 0x20, 0x00, 0x46, 0x55, 0x53, 0x45, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x43, 0x48, 0x49, 0x4D, 0x45, 0x59, 0x20, 0x20, 0x20, 0x20, 0x00, 0x43, 0x4F, 0x4D, 0x50, 0x20, 0x43, 0x4C, 0x4E, 0x20, 0x20, 0x00, 0x4C, 0x49, 0x56, 0x45, 0x4C, 0x59, 0x20, 0x20, 0x20, 0x20, 0x00, 0x53, 0x54, 0x45, 0x50, 0x50, 0x49, 0x4E, 0x20, 0x20, 0x20, 0x00, 0x47, 0x54, 0x52, 0x3E, 0x42, 0x41, 0x53, 0x53, 0x20, 0x20, 0x00, 0x44, 0x45, 0x52, 0x20, 0x59, 0x41, 0x20, 0x20, 0x20, 0x20, 0x00, 0x46, 0x4C, 0x4E, 0x47, 0x54, 0x53, 0x54, 0x43, 0x20, 0x20, 0x00, 0x53, 0x50, 0x41, 0x43, 0x46, 0x4C, 0x54, 0x52, 0x20, 0x20, 0x00, 0x53, 0x54, 0x45, 0x4C, 0x4C, 0x41, 0x52, 0x20, 0x20, 0x20, 0x00, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x41, 0x4C, 0x20, 0x20, 0x00, 0x41, 0x4E, 0x4C, 0x47, 0x20, 0x42, 0x4F, 0x59, 0x20, 0x20, 0x00, 0x53, 0x54, 0x55, 0x54, 0x54, 0x45, 0x52, 0x20, 0x20, 0x20, 0x00, 0x44, 0x49, 0x56, 0x45, 0x42, 0x4F, 0x4D, 0x42, 0x20, 0x20, 0x00
                    }));
                }
                break;
                case CommMsgID.ReqModifierLinkablesList:
                {
                    ReceivedMessage?.Invoke(this, new ProcedureInMessage(CommMsgID.RxModifierLinkablesList, new byte[]
                    {
                        0x00, 0x01, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x04, 0x00, 0xD0, 0x04, 0x00, 0xD3, 0x04, 0x00, 0xD2, 0x04, 0x09, 0x81, 0x06, 0x09, 0x90, 0x06, 0x09, 0x91, 0x06, 0x09, 0xC1, 0x08, 0x09, 0xCB, 0x08, 0x09, 0xCC, 0x08, 0x09, 0xCD, 0x08, 0x09, 0xC2, 0x08, 0x0C, 0x8C, 0x18, 0x0C, 0x8D, 0x18, 0x0C, 0x83, 0x18, 0x0C, 0x8E, 0x18, 0x0C, 0x84, 0x18, 0x0C, 0x8F, 0x18, 0x0C, 0x85, 0x18, 0x02, 0xC1, 0x0C, 0x02, 0xC6, 0x0C, 0x02, 0xC8, 0x0C, 0x02, 0xC9, 0x0C, 0x02, 0xCA, 0x0C, 0x03, 0x01, 0x0E, 0x03, 0x86, 0x0E, 0x03, 0x87, 0x0E, 0x03, 0x88, 0x0E, 0x03, 0x85, 0x0E, 0x03, 0x89, 0x0E, 0x07, 0x41, 0x0F, 0x07, 0x47, 0x0F, 0x07, 0x63, 0x0F, 0x07, 0x70, 0x0F, 0x07, 0x44, 0x0F, 0x07, 0x64, 0x0F, 0x07, 0x81, 0x10, 0x07, 0x82, 0x10, 0x07, 0x87, 0x10, 0x07, 0x8D, 0x10, 0x07, 0x85, 0x10, 0x0A, 0x42, 0x0D, 0x0A, 0x42, 0x11, 0x0D, 0x01, 0x22, 0x0E, 0x41, 0x21
                    }));
                }
                break;
                case CommMsgID.ReqPreset:
                {
                    ReceivedMessage?.Invoke(this, new ProcedureInMessage(CommMsgID.RxPresetStart, new byte[]
                    {
                        0x00, 0x02, 0x53, 0x4F, 0x4C, 0x4F, 0x20, 0x44, 0x4C, 0x59, 0x20, 0x20, 0x00, 0x00, 0x02
                    }));
                    ReceivedMessage?.Invoke(this, new ProcedureInMessage(CommMsgID.RxPresetParams, new byte[]
                    {
                        0x00, 0x6F, 0x00, 0x81, 0x03, 0x00, 0x00, 0x80, 0x03, 0x82, 0x00, 0x86, 0x00, 0x85, 0x03, 0x00, 0x00, 0xC1, 0x04, 0x00, 0x00, 0xCF, 0x04, 0x82, 0x00, 0xC4, 0x00, 0xD0, 0x04, 0x1E, 0x00, 0xD3, 0x04, 0x00, 0x00, 0xD2, 0x04, 0x50, 0x09, 0x81, 0x06, 0x00, 0x09, 0x80, 0x06, 0x82, 0x05, 0x05, 0x09, 0x90, 0x06, 0x3C, 0x09, 0x91, 0x06, 0x32, 0x09, 0xC0, 0x08, 0x82, 0x01, 0x4B, 0x09, 0xC1, 0x08, 0x4B, 0x09, 0xCB, 0x08, 0x2D, 0x09, 0xCC, 0x08, 0x2D, 0x09, 0xCD, 0x08, 0x2D, 0x09, 0xC2, 0x08, 0x32, 0x0A, 0x00, 0x09, 0x82, 0x02, 0x61, 0x0C, 0x8C, 0x18, 0x01, 0x0C, 0x83, 0x18, 0x11, 0x0C, 0x8E, 0x18, 0x17, 0x0C, 0x84, 0x18, 0x07, 0x0C, 0x8F, 0x18, 0x07, 0x0C, 0x85, 0x18, 0x0F, 0x02, 0xC1, 0x0C, 0x01, 0x02, 0xC0, 0x0C, 0x82, 0x03, 0x00, 0x02, 0xC6, 0x0C, 0x1E, 0x02, 0xC8, 0x0C, 0x00, 0x02, 0xC9, 0x0C, 0x00, 0x02, 0xCA, 0x0C, 0x23, 0x03, 0x01, 0x0E, 0x00, 0x03, 0x00, 0x0E, 0x82, 0x03, 0x7D, 0x03, 0x02, 0x0E, 0x82, 0x06, 0x08, 0x03, 0x86, 0x0E, 0x14, 0x03, 0x87, 0x0E, 0x14, 0x03, 0x88, 0x0E, 0x46, 0x03, 0x85, 0x0E, 0x53, 0x03, 0x89, 0x0E, 0x00, 0x07, 0x41, 0x0F, 0x01, 0x07, 0x40, 0x0F, 0x82, 0x04, 0x20, 0x07, 0x6C, 0x0F, 0x82, 0x01, 0xB8, 0x07, 0x47, 0x0F, 0x14, 0x07, 0x63, 0x0F, 0x01, 0x07, 0x70, 0x0F, 0x82, 0x08, 0x81, 0x07, 0x44, 0x0F, 0x14, 0x07, 0x64, 0x0F, 0x0F, 0x07, 0x81, 0x10, 0x00, 0x07, 0x80, 0x10, 0x82, 0x04, 0x7B, 0x07, 0x82, 0x10, 0x02, 0x07, 0x87, 0x10, 0x32, 0x07, 0x8D, 0x10, 0x28, 0x07, 0x85, 0x10, 0x1E, 0x00, 0x84, 0x03, 0x63, 0x21, 0x01, 0x15, 0x00, 0x0A, 0x42, 0x0D, 0x63, 0x0A, 0x42, 0x11, 0x63, 0x0A, 0x42, 0x12, 0x28, 0x20, 0x02, 0x13, 0x83, 0x0D, 0x0A, 0x42, 0x20, 0x03, 0x13, 0x00, 0x20, 0x04, 0x13, 0x63, 0x20, 0x42, 0x16, 0x00, 0x20, 0x43, 0x16, 0x00, 0x20, 0x44, 0x16, 0x00, 0x20, 0x46, 0x16, 0x00, 0x20, 0x47, 0x16, 0x00, 0x20, 0x42, 0x17, 0x00, 0x20, 0x43, 0x17, 0x00, 0x20, 0x44, 0x17, 0x00, 0x20, 0x46, 0x17, 0x00, 0x20, 0x47, 0x17, 0x00, 0x20, 0x02, 0x14, 0x83, 0x03, 0x00, 0x84, 0x20, 0x03, 0x14, 0x00, 0x20, 0x04, 0x14, 0x63, 0x20, 0xC0, 0x15, 0x83, 0x03, 0x00, 0x81, 0x20, 0xC1, 0x15, 0x00, 0x20, 0xC2, 0x15, 0x01, 0x20, 0xC9, 0x15, 0x00, 0x22, 0x00, 0x1A, 0x82, 0x07, 0x00, 0x22, 0x01, 0x1A, 0x82, 0x07, 0x40, 0x22, 0x02, 0x1A, 0x33, 0x22, 0x04, 0x1A, 0x82, 0x00, 0xA3, 0x22, 0x06, 0x1A, 0x27, 0x22, 0x08, 0x1A, 0x3B, 0x0A, 0x00, 0x09, 0x82, 0x02, 0x61, 0x22, 0x08, 0x1A, 0x3B, 0x22, 0x08, 0x1A, 0x3B, 0x22, 0x08, 0x1A, 0x3B, 0x22, 0x08, 0x1A, 0x3B, 0x0C, 0x8D, 0x18, 0x09, 0x0C, 0x90, 0x18, 0x01, 0x0C, 0x91, 0x18, 0x01, 0x0C, 0x92, 0x18, 0x01, 0x0D, 0x01, 0x22, 0x00, 0x0E, 0x41, 0x21, 0x00, 0x07, 0x06, 0x22, 0x82, 0x06, 0x07, 0x20, 0xC0, 0x1C, 0x83, 0x04, 0x00, 0xC1, 0x20, 0xC1, 0x1C, 0x00, 0x20, 0xC2, 0x1C, 0x01, 0x20, 0xC0, 0x1D, 0x83, 0x06, 0x09, 0x81, 0x20, 0xC1, 0x1D, 0x00, 0x20, 0xC2, 0x1D, 0x01, 0x20, 0xC0, 0x1E, 0x83, 0x0E, 0x03, 0x01, 0x20, 0xC1, 0x1E, 0x00, 0x20, 0xC2, 0x1E, 0x01, 0x20, 0xC0, 0x1F, 0x83, 0x0F, 0x07, 0x41, 0x20, 0xC1, 0x1F, 0x00, 0x20, 0xC2, 0x1F, 0x01, 0x20, 0xC0, 0x20, 0x83, 0x10, 0x07, 0x81, 0x20, 0xC1, 0x20, 0x00, 0x20, 0xC2, 0x20, 0x01
                    }));
                    ReceivedMessage?.Invoke(this, new ProcedureInMessage(CommMsgID.RxPresetEnd, new byte[]
                    {
                    
                    }));
                }
                break;
                case CommMsgID.MovePreset:
                case CommMsgID.RxParamValue:
                    break;
                default:
                {
                    throw new ArgumentOutOfRangeException(message.ID.ToString());
                }
                //RxParamValue  0x09, 0x80, 0x06, 0x82, 0x05, 0x05,
            }
        }

        public void Dispose() { }
    }
}
